<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Gestion des produits-spring-boot/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Gestion des produits-spring-boot/Dockerfile" />
              <option name="updatedContent" value="FROM maven:3.9-eclipse-temurin-17 AS build&#10;WORKDIR /app&#10;COPY pom.xml .&#10;COPY src ./src&#10;RUN mvn clean package -DskipTests&#10;&#10;FROM eclipse-temurin:17-jre-alpine&#10;WORKDIR /app&#10;COPY --from=build /app/target/*.war app.war&#10;EXPOSE 8080&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.war&quot;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="#  Écosystème Tricol - Gestion des Approvisionnements&#10;&#10;Système de microservices pour la gestion des approvisionnements de l'entreprise Tricol, déployé avec Docker Compose.&#10;&#10;##  Architecture&#10;&#10;L'écosystème comprend **3 microservices** et une base de données PostgreSQL partagée :&#10;&#10;```&#10;┌─────────────────────────────────────────────────────────┐&#10;│                    PostgreSQL Database                   │&#10;│                      tricol_db (port 5442)              │&#10;└──────────────┬──────────────┬──────────────┬────────────┘&#10;               │              │              │&#10;       ┌───────▼──────┐ ┌────▼─────┐ ┌──────▼────────┐&#10;       │ Auth Service │ │ Produits │ │ Fournisseurs  │&#10;       │  (port 8081) │ │ (8080)   │ │  (port 8082)  │&#10;       │ Spring Boot  │ │ Boot     │ │ Spring Core   │&#10;       └──────────────┘ └──────────┘ └───────────────┘&#10;```&#10;&#10;###  Services&#10;&#10;| Service | Port | Type | Description |&#10;|---------|------|------|-------------|&#10;| **PostgreSQL** | 5442 | Database | Base de données partagée |&#10;| **Auth** | 8081 | Spring Boot WAR | Service d'authentification JWT |&#10;| **Produits** | 8080 | Spring Boot WAR | Gestion des produits |&#10;| **Fournisseurs** | 8082 | Spring Framework | Gestion des fournisseurs (Spring Core) |&#10;&#10;##  Démarrage Rapide&#10;&#10;### Prérequis&#10;&#10;- Docker 20.10+&#10;- Docker Compose 2.0+&#10;- Java 17+ (pour développement local)&#10;- Maven 3.8+ (pour builds locaux)&#10;&#10;### 1. Compiler les projets&#10;&#10;```bash&#10;# Compiler le service Auth&#10;cd Authontification&#10;mvn clean package&#10;cd ..&#10;&#10;# Compiler le service Produits&#10;cd &quot;Gestion des produits-spring-boot&quot;&#10;mvn clean package&#10;cd ..&#10;&#10;# Compiler le service Fournisseurs (Spring Core)&#10;cd Gestion-des-Fournisseurs-spring-core&#10;mvn clean package&#10;cd ..&#10;```&#10;&#10;### 2. Lancer l'écosystème complet&#10;&#10;```bash&#10;# Démarrer tous les services&#10;docker-compose up -d&#10;&#10;# Voir les logs&#10;docker-compose logs -f&#10;&#10;# Vérifier l'état des services&#10;docker-compose ps&#10;```&#10;&#10;### 3. Accéder aux services&#10;&#10;- **Auth Service**: http://localhost:8081&#10;- **Produits Service**: http://localhost:8080&#10;- **Fournisseurs Service**: http://localhost:8082&#10;- **PostgreSQL**: localhost:5442&#10;&#10;##  Configuration Base de Données&#10;&#10;Tous les services partagent la même base PostgreSQL :&#10;&#10;```yaml&#10;Database: tricol_db&#10;User: tricol_user&#10;Password: tricol_pass123&#10;Port externe: 5442&#10;Port interne (Docker): 5432&#10;```&#10;&#10;### Script d'initialisation&#10;&#10;Le fichier `init-db.sql` est automatiquement exécuté au premier démarrage de PostgreSQL.&#10;&#10;##  Endpoints API&#10;&#10;### Auth Service (port 8081)&#10;&#10;```http&#10;POST   /auth/register    - Créer un utilisateur&#10;POST   /auth/login       - Se connecter (obtenir JWT)&#10;GET    /auth/users       - Liste des utilisateurs&#10;```&#10;&#10;### Produits Service (port 8080)&#10;&#10;```http&#10;GET    /produits         - Liste des produits&#10;POST   /produits         - Créer un produit&#10;GET    /produits/{id}    - Détails d'un produit&#10;PUT    /produits/{id}    - Modifier un produit&#10;DELETE /produits/{id}    - Supprimer un produit&#10;```&#10;&#10;### Fournisseurs Service (port 8082)&#10;&#10;```http&#10;GET    /fournisseurs     - Liste des fournisseurs&#10;POST   /fournisseurs     - Créer un fournisseur&#10;GET    /fournisseurs/{id} - Détails d'un fournisseur&#10;PUT    /fournisseurs/{id} - Modifier un fournisseur&#10;DELETE /fournisseurs/{id} - Supprimer un fournisseur&#10;```&#10;&#10;## ️ Développement&#10;&#10;### Travailler sur un service spécifique&#10;&#10;```bash&#10;# Redémarrer un seul service&#10;docker-compose restart auth&#10;&#10;# Reconstruire et redémarrer&#10;docker-compose up -d --build auth&#10;&#10;# Voir les logs d'un service&#10;docker-compose logs -f fournisseurs&#10;```&#10;&#10;### Build local (sans Docker)&#10;&#10;#### Service Fournisseurs (Spring Core + Jetty)&#10;&#10;```bash&#10;cd Gestion-des-Fournisseurs-spring-core&#10;mvn clean package&#10;mvn jetty:run&#10;# Accessible sur http://localhost:8080&#10;```&#10;&#10;#### Service Auth (Spring Boot)&#10;&#10;```bash&#10;cd Authontification&#10;mvn clean package&#10;mvn spring-boot:run&#10;# Accessible sur http://localhost:8080&#10;```&#10;&#10;#### Service Produits (Spring Boot)&#10;&#10;```bash&#10;cd &quot;Gestion des produits-spring-boot&quot;&#10;mvn clean package&#10;mvn spring-boot:run&#10;# Accessible sur http://localhost:8080&#10;```&#10;&#10;##  Tests&#10;&#10;### Tester les endpoints&#10;&#10;Fichiers de test HTTP disponibles :&#10;- `Authontification/authTest.http`&#10;- `Gestion-des-Fournisseurs-spring-core/testEndPoints.http`&#10;&#10;### Exemple de requête Auth&#10;&#10;```http&#10;### Créer un utilisateur&#10;POST http://localhost:8081/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;admin&quot;,&#10;  &quot;password&quot;: &quot;admin123&quot;,&#10;  &quot;email&quot;: &quot;admin@tricol.com&quot;&#10;}&#10;&#10;### Login&#10;POST http://localhost:8081/auth/login&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;admin&quot;,&#10;  &quot;password&quot;: &quot;admin123&quot;&#10;}&#10;```&#10;&#10;##  Arrêt et Nettoyage&#10;&#10;```bash&#10;# Arrêter tous les services&#10;docker-compose down&#10;&#10;# Arrêter et supprimer les volumes (⚠️ perte de données)&#10;docker-compose down -v&#10;&#10;# Supprimer les images construites&#10;docker-compose down --rmi local&#10;```&#10;&#10;## ️ Structure Technique&#10;&#10;### Service Fournisseurs (Spring Framework)&#10;- **Framework**: Spring Core 6.1.18 (non-Boot)&#10;- **Configuration**: XML (`applicationContext.xml`)&#10;- **Serveur**: Tomcat 10.1 (en Docker)&#10;- **ORM**: Spring Data JPA + Hibernate 6.5.2&#10;- **Packaging**: WAR&#10;&#10;### Services Auth &amp; Produits (Spring Boot)&#10;- **Framework**: Spring Boot 3.x&#10;- **Configuration**: `application.properties`&#10;- **Serveur**: Tomcat embarqué&#10;- **ORM**: Spring Data JPA&#10;- **Packaging**: WAR&#10;&#10;##  Sécurité&#10;&#10;- JWT pour l'authentification (service Auth)&#10;- Secrets configurables via variables d'environnement&#10;- Isolation réseau Docker&#10;&#10;##  Variables d'Environnement&#10;&#10;```bash&#10;# JWT Configuration (optionnel)&#10;JWT_SECRET=your-secret-key-change-this-in-production&#10;JWT_EXPIRATION=3600000&#10;&#10;# Database (configuré par défaut)&#10;SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/tricol_db&#10;SPRING_DATASOURCE_USERNAME=tricol_user&#10;SPRING_DATASOURCE_PASSWORD=tricol_pass123&#10;```&#10;&#10;##  Dépannage&#10;&#10;### Les services ne démarrent pas&#10;&#10;```bash&#10;# Vérifier les logs&#10;docker-compose logs postgres&#10;docker-compose logs auth&#10;&#10;# Vérifier la santé de PostgreSQL&#10;docker-compose exec postgres pg_isready -U tricol_user&#10;```&#10;&#10;### Erreur de connexion DB&#10;&#10;```bash&#10;# Recréer la base&#10;docker-compose down -v&#10;docker-compose up -d&#10;```&#10;&#10;### Port déjà utilisé&#10;&#10;```bash&#10;# Vérifier les ports&#10;netstat -tuln | grep -E '8080|8081|8082|5442'&#10;&#10;# Changer les ports dans docker-compose.yml&#10;```&#10;&#10;##  Documentation Additionnelle&#10;&#10;- [Docker Compose Guide](./README-DOCKER.md)&#10;- [Schema Base de Données](./init-db.sql)&#10;&#10;##  Équipe&#10;&#10;Développé par l'équipe Tricol&#10;&#10;##  Licence&#10;&#10;Propriétaire - Tricol © 2025&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: tricol-postgres&#10;    environment:&#10;      POSTGRES_DB: tricol_db&#10;      POSTGRES_USER: tricol_user&#10;      POSTGRES_PASSWORD: tricol_pass123&#10;    ports:&#10;      - &quot;5442:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql&#10;    networks:&#10;      - tricol-network&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U tricol_user -d tricol_db&quot;]&#10;      interval: 5s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  auth:&#10;    build: ./Authontification&#10;    container_name: tricol-auth&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tricol_db&#10;      SPRING_DATASOURCE_USERNAME: tricol_user&#10;      SPRING_DATASOURCE_PASSWORD: tricol_pass123&#10;      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}&#10;      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;    networks:&#10;      - tricol-network&#10;    restart: on-failure&#10;&#10;  app:&#10;    build: Gestion-des-Fournisseurs-spring-core&#10;    container_name: tricol-app-v0.1&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;      auth:&#10;        condition: service_started&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tricol_db&#10;      SPRING_DATASOURCE_USERNAME: tricol_user&#10;      SPRING_DATASOURCE_PASSWORD: tricol_pass123&#10;      AUTH_SERVICE_URL: http://auth:8080&#10;    ports:&#10;      - &quot;3000:8080&quot;&#10;    networks:&#10;      - tricol-network&#10;    restart: on-failure&#10;&#10;volumes:&#10;  postgres_data:&#10;&#10;networks:&#10;  tricol-network:&#10;    driver: bridge&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: tricol-postgres&#10;    environment:&#10;      POSTGRES_DB: tricol_db&#10;      POSTGRES_USER: tricol_user&#10;      POSTGRES_PASSWORD: tricol_pass123&#10;    ports:&#10;      - &quot;5442:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql&#10;    networks:&#10;      - tricol-network&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U tricol_user -d tricol_db&quot;]&#10;      interval: 5s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  auth:&#10;    build: ./Authontification&#10;    container_name: tricol-auth&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tricol_db&#10;      SPRING_DATASOURCE_USERNAME: tricol_user&#10;      SPRING_DATASOURCE_PASSWORD: tricol_pass123&#10;      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}&#10;      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;    networks:&#10;      - tricol-network&#10;    restart: on-failure&#10;&#10;  fournisseurs:&#10;    build: ./Gestion-des-Fournisseurs-spring-core&#10;    container_name: tricol-fournisseurs&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tricol_db&#10;      SPRING_DATASOURCE_USERNAME: tricol_user&#10;      SPRING_DATASOURCE_PASSWORD: tricol_pass123&#10;    ports:&#10;      - &quot;8082:8080&quot;&#10;    networks:&#10;      - tricol-network&#10;    restart: on-failure&#10;&#10;  produits:&#10;    build: ./Gestion des produits-spring-boot&#10;    container_name: tricol-produits&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tricol_db&#10;      SPRING_DATASOURCE_USERNAME: tricol_user&#10;      SPRING_DATASOURCE_PASSWORD: tricol_pass123&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    networks:&#10;      - tricol-network&#10;    restart: on-failure&#10;&#10;volumes:&#10;  postgres_data:&#10;&#10;networks:&#10;  tricol-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>